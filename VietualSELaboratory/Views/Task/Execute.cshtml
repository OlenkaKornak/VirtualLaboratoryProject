@model Domain.RDBMS.Entities.Exercise

<style type="text/css">
    #all_bodyl {
        width: 83%;
        height: 100%;
        margin-left: 260px;
    }

    #task_div {
        margin-right: 10px;
        margin-bottom: 10px;
        height: 130px;
        padding: 20px;
        background: #FFFF;
        text-align: left;
        width: 100%;
        justify-content:flex-start;
    }

    #lable {
        font-family: Poppins;
        color: #0C8524;
    }

    #task_desc {
        font-family: Poppins;
        font-size: 16px;
        color: #91959E;
    }

    .question {
        font-family: Poppins;
        font-size: 20px;
        color: black;
    }

    #button_div {
        float: right;
        padding-top: 20px;
        background: white;
    }

    .button {
        font-family: Poppins;
        text-align: center;
        height: 36px;
        width: 140px;
        background-color: #0C8524;
        border:white;
        color: #FFFF;
        line-height: normal;
        font-size:15px;
    }

    .list {
        margin: 0px;
    }

    .list_caption {
        font-family: Poppins;
        color: #707683;
        border-bottom: 3px solid #18BF36;
        margin: 10px;
    }

    .list_card {
        background: white;
        margin: 5px;
        color: #91959E;
    }

</style>

<div id="all_bodyl" style="width: 1050px;">
    <div id="task_div">
        <h1 id="lable">Task execution</h1>
        <p id="task_desc">@Model.Description</p>
    </div>

    <div id="task_div" style="margin-bottom:0px; background-color: #FFFF; height: 500px; font-size: 15px;">
        <p id="question_text" class="question" style="color: #707683; margin-left:50px;"></p>

        <div class="hero">
            <div class="wrapper">
                <ul class="list">

                    <li class="list_caption">All answers</li>
                    <li class="list_caption">Correct answers</li>
                    <li class="list_caption">Incorrect answers</li>
                    <li id="all_answers" class="list_cell js-cell"></li>
                    <li id="correct_answers" class="list_cell js-cell"></li>
                    <li id="incorrect_answers" class="list_cell js-cell"></li>
                </ul>
            </div>
        </div>

        <div id="button_div">
            <button id="nextQuestionBtn" type="button" class="button" disabled onclick="nextQuestion();"
                    style="background: lightgrey; color: #707683" hidden="hidden">
                Next question
            </button>
            <button id="nextQuestionBtn" type="button" class="button"  onclick="cancel();"
                    style="background: lightgrey; color: #707683">
                Cancel
            </button>
            <!--need to save last viewModelItem before save-->
            <button id="finishBtn" type="button" class="button" disabled onclick="finishTask();">Finish</button>
        </div>
    </div>
</div>

<script>
    var correctAnswersCell = "correct_answers";

    var viewModelItem = {
        questionId: 1,
        correct: [],
        incorrect: []
    };

    //Add taskId
    var viewModel = [];

    var model = @Html.Raw(Json.Serialize(Model));
    console.log(model);
    var currentQuestion = null;
    var currentViewModelItem = null;

    $(document).ready(function() {
        nextQuestion();
    });

    function cancel() {
        swal({
            title: "Finish execution",
            text: "Are you sure you want to finish a task executing?",
            showCancelButton: true,
            cancelButtonColor: "#D3D3D3",
            confirmButtonColor: "#0C8524",
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel",
            closeOnConfirm: true,
            closeOnCancel: true
        }, function (isConfirm) {
            if (isConfirm) {
                window.location.href = '@Url.Action("Index", "Task")';
            }
        });
    }

    function nextQuestion() {
        clearCells();

        if (currentViewModelItem) {
            viewModel.push(currentViewModelItem);
            currentViewModelItem = null;
        }

        //get next element

        currentQuestion = model.questions.shift();

        //set currentViewModelItem
        currentViewModelItem = {
            questionId: currentQuestion.id,
            all: currentQuestion.answers.map(element => element.id), //all ids
            correct: [],
            incorrect: [],
        };

        //show question & answers
        $("#question_text").html(currentQuestion.text);
        for (var key in currentQuestion.answers) {
            var answer = currentQuestion.answers[key];
            $("#all_answers").append("<div class='list_card js-card' draggable='true' data-answer-id=" + answer.id + ">" + answer.text + "</div>");
        }

        $("#nextQuestionBtn").attr("disabled", true);
        dragAndDrop();

        if (model.questions.length === 0) {
            $("#nextQuestionBtn").attr("disabled", true);
            $("#finishBtn").attr("disabled", false);
            return;
        }
    }

    function dragAndDrop() {
        var cards = document.querySelectorAll(".js-card");
        var cells = document.querySelectorAll(".js-cell");

        let draggedItem = null;

        for (var i = 0; i < cards.length; i++) {
            const card = cards[i];

            card.addEventListener("dragstart",
                function(e) {
                    setTimeout(function() {
                            draggedItem = card;
                            var element = e.target;
                            element.classList.add("hide");
                        },
                        0);
                });

            card.addEventListener("dragend",
                function() {
                    draggedItem.classList.remove("hide");
                    draggedItem = null;
                });

            cells.forEach(function(cell) {
                cell.addEventListener("dragover",
                    function(evt) {
                        evt.preventDefault();
                    });

                cell.addEventListener("dragenter",
                    function(evt) {
                        evt.preventDefault();
                        this.classList.add("hovered");
                    });

                cell.addEventListener("dragleave",
                    function(evt) {
                        evt.preventDefault();
                        this.classList.remove("hovered");
                    });

                cell.addEventListener("drop",
                    function() {
                        if (!draggedItem) {
                            return;
                        }

                        this.append(draggedItem);
                        this.classList.remove("hovered");

                        var answerId = $(draggedItem).data("answer-id");

                        var cellId = $(cell).attr("id");

                        if (cellId === "all_answers" && currentViewModelItem.all.indexOf(answerId) === -1) {
                            currentViewModelItem.correct = currentViewModelItem.correct.filter(m => m !== answerId);
                            currentViewModelItem.incorrect = currentViewModelItem.incorrect.filter(m => m !== answerId);
                            currentViewModelItem.all.push(answerId);
                        } else if (cellId === "correct_answers" && currentViewModelItem.correct.indexOf(answerId) === -1) {
                            currentViewModelItem.all = currentViewModelItem.all.filter(m => m !== answerId);
                            currentViewModelItem.incorrect = currentViewModelItem.incorrect.filter(m => m !== answerId);
                            currentViewModelItem.correct.push(answerId);
                        } else if (cellId === "incorrect_answers" && currentViewModelItem.incorrect.indexOf(answerId) === -1) {
                            currentViewModelItem.all = currentViewModelItem.all.filter(m => m !== answerId);
                            currentViewModelItem.correct = currentViewModelItem.correct.filter(m => m !== answerId);
                            currentViewModelItem.incorrect.push(answerId);
                        }


                        if (currentViewModelItem.all.length === 0 && model.questions.length !== 0) {
                            $("#nextQuestionBtn").attr("disabled", false);
                        } else {
                            $("#nextQuestionBtn").attr("disabled", true);
                        }
                    });
            });
        }
    }

    function finishTask() {
        viewModel.push(currentViewModelItem);
        currentViewModelItem = null;

        viewModel.forEach(function(model) {
            delete model.all;
        });

        var data = {};
        data["Answers"] = viewModel;
        data["ExerciseId"] = model.id;
        $.ajax({
            url: "/Task/SaveExecution",
            dataType: 'text',
            cache: false,
            method: "POST",
            data: data,
            success: function (grade) {
                swal({
                    title: "Execution result",
                    text: "Your result is " + JSON.parse(grade).result + " %",
                    confirmButtonColor: "#0C8524",
                    confirmButtonText: "OK",
                    closeOnConfirm: true,
                }, function () {
                    var url = '@Url.Action("Index", "Task")';
                    window.location.href = url;
                });

            }
        });
    }


    function clearCells() {
        $("#all_answers").empty();
        $("#correct_answers").empty();
        $("#incorrect_answers").empty();
    }
</script>

