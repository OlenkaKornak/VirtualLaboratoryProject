#pragma checksum "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\Task\Execute.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4f83ed5f3afb3ccd236a47e49b9254feabdca8cf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Task_Execute), @"mvc.1.0.view", @"/Views/Task/Execute.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\_ViewImports.cshtml"
using VietualSELaboratory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\_ViewImports.cshtml"
using VietualSELaboratory.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4f83ed5f3afb3ccd236a47e49b9254feabdca8cf", @"/Views/Task/Execute.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"179fc49a916ca0cd7fed31ea3b73de287ab4fae6", @"/Views/_ViewImports.cshtml")]
    public class Views_Task_Execute : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Domain.RDBMS.Entities.Exercise>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<style type=""text/css"">
    #all_bodyl {
        width: 83%;
        height: 100%;
        margin-left: 260px;
    }

    #task_div {
        margin-right: 10px;
        margin-bottom: 10px;
        height: 130px;
        padding: 20px;
        background: #FFFF;
        text-align: left;
        width: 100%;
        justify-content:flex-start;
    }

    #lable {
        font-family: Poppins;
        color: #0C8524;
    }

    #task_desc {
        font-family: Poppins;
        font-size: 16px;
        color: #91959E;
    }

    .question {
        font-family: Poppins;
        font-size: 20px;
        color: black;
    }

    #button_div {
        float: right;
        padding-top: 20px;
        background: white;
    }

    .button {
        font-family: Poppins;
        text-align: center;
        height: 36px;
        width: 140px;
        background-color: #0C8524;
        border:white;
        color: #FFFF;
        line-height: normal;
        font-siz");
            WriteLiteral(@"e:15px;
    }

    .list {
        margin: 0px;
    }

    .list_caption {
        font-family: Poppins;
        color: #707683;
        border-bottom: 3px solid #18BF36;
        margin: 10px;
    }

    .list_card {
        background: white;
        margin: 5px;
        color: #91959E;
    }

</style>

<div id=""all_bodyl"" style=""width: 1050px;"">
    <div id=""task_div"">
        <h1 id=""lable"">Task execution</h1>
        <p id=""task_desc"">");
#nullable restore
#line 78 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\Task\Execute.cshtml"
                     Write(Model.Description);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>
    </div>

    <div id=""task_div"" style=""margin-bottom:0px; background-color: #FFFF; height: 500px; font-size: 15px;"">
        <p id=""question_text"" class=""question"" style=""color: #707683; margin-left:50px;""></p>

        <div class=""hero"">
            <div class=""wrapper"">
                <ul class=""list"">

                    <li class=""list_caption"">All answers</li>
                    <li class=""list_caption"">Correct answers</li>
                    <li class=""list_caption"">Incorrect answers</li>
                    <li id=""all_answers"" class=""list_cell js-cell""></li>
                    <li id=""correct_answers"" class=""list_cell js-cell""></li>
                    <li id=""incorrect_answers"" class=""list_cell js-cell""></li>
                </ul>
            </div>
        </div>

        <div id=""button_div"">
            <button id=""nextQuestionBtn"" type=""button"" class=""button"" disabled onclick=""nextQuestion();""
                    style=""background: lightgrey; color: #707683"" hid");
            WriteLiteral(@"den=""hidden"">
                Next question
            </button>
            <button id=""nextQuestionBtn"" type=""button"" class=""button""  onclick=""cancel();""
                    style=""background: lightgrey; color: #707683"">
                Cancel
            </button>
            <!--need to save last viewModelItem before save-->
            <button id=""finishBtn"" type=""button"" class=""button"" disabled onclick=""finishTask();"">Finish</button>
        </div>
    </div>
</div>

<script>
    var correctAnswersCell = ""correct_answers"";

    var viewModelItem = {
        questionId: 1,
        correct: [],
        incorrect: []
    };

    //Add taskId
    var viewModel = [];

    var model = ");
#nullable restore
#line 125 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\Task\Execute.cshtml"
           Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
    console.log(model);
    var currentQuestion = null;
    var currentViewModelItem = null;

    $(document).ready(function() {
        nextQuestion();
    });

    function cancel() {
        swal({
            title: ""Finish execution"",
            text: ""Are you sure you want to finish a task executing?"",
            showCancelButton: true,
            cancelButtonColor: ""#D3D3D3"",
            confirmButtonColor: ""#0C8524"",
            confirmButtonText: ""Confirm"",
            cancelButtonText: ""Cancel"",
            closeOnConfirm: true,
            closeOnCancel: true
        }, function (isConfirm) {
            if (isConfirm) {
                window.location.href = '");
#nullable restore
#line 147 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\Task\Execute.cshtml"
                                   Write(Url.Action("Index", "Task"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
            }
        });
    }

    function nextQuestion() {
        clearCells();

        if (currentViewModelItem) {
            viewModel.push(currentViewModelItem);
            currentViewModelItem = null;
        }

        //get next element

        currentQuestion = model.questions.shift();

        //set currentViewModelItem
        currentViewModelItem = {
            questionId: currentQuestion.id,
            all: currentQuestion.answers.map(element => element.id), //all ids
            correct: [],
            incorrect: [],
        };

        //show question & answers
        $(""#question_text"").html(currentQuestion.text);
        for (var key in currentQuestion.answers) {
            var answer = currentQuestion.answers[key];
            $(""#all_answers"").append(""<div class='list_card js-card' draggable='true' data-answer-id="" + answer.id + "">"" + answer.text + ""</div>"");
        }

        $(""#nextQuestionBtn"").attr(""disabled"", true);
        dragAndDrop(");
            WriteLiteral(@");

        if (model.questions.length === 0) {
            $(""#nextQuestionBtn"").attr(""disabled"", true);
            $(""#finishBtn"").attr(""disabled"", false);
            return;
        }
    }

    function dragAndDrop() {
        var cards = document.querySelectorAll("".js-card"");
        var cells = document.querySelectorAll("".js-cell"");

        let draggedItem = null;

        for (var i = 0; i < cards.length; i++) {
            const card = cards[i];

            card.addEventListener(""dragstart"",
                function(e) {
                    setTimeout(function() {
                            draggedItem = card;
                            var element = e.target;
                            element.classList.add(""hide"");
                        },
                        0);
                });

            card.addEventListener(""dragend"",
                function() {
                    draggedItem.classList.remove(""hide"");
                    draggedItem = null;
  ");
            WriteLiteral(@"              });

            cells.forEach(function(cell) {
                cell.addEventListener(""dragover"",
                    function(evt) {
                        evt.preventDefault();
                    });

                cell.addEventListener(""dragenter"",
                    function(evt) {
                        evt.preventDefault();
                        this.classList.add(""hovered"");
                    });

                cell.addEventListener(""dragleave"",
                    function(evt) {
                        evt.preventDefault();
                        this.classList.remove(""hovered"");
                    });

                cell.addEventListener(""drop"",
                    function() {
                        if (!draggedItem) {
                            return;
                        }

                        this.append(draggedItem);
                        this.classList.remove(""hovered"");

                        var answerId = $(draggedItem");
            WriteLiteral(@").data(""answer-id"");

                        var cellId = $(cell).attr(""id"");

                        if (cellId === ""all_answers"" && currentViewModelItem.all.indexOf(answerId) === -1) {
                            currentViewModelItem.correct = currentViewModelItem.correct.filter(m => m !== answerId);
                            currentViewModelItem.incorrect = currentViewModelItem.incorrect.filter(m => m !== answerId);
                            currentViewModelItem.all.push(answerId);
                        } else if (cellId === ""correct_answers"" && currentViewModelItem.correct.indexOf(answerId) === -1) {
                            currentViewModelItem.all = currentViewModelItem.all.filter(m => m !== answerId);
                            currentViewModelItem.incorrect = currentViewModelItem.incorrect.filter(m => m !== answerId);
                            currentViewModelItem.correct.push(answerId);
                        } else if (cellId === ""incorrect_answers"" && currentViewModelItem");
            WriteLiteral(@".incorrect.indexOf(answerId) === -1) {
                            currentViewModelItem.all = currentViewModelItem.all.filter(m => m !== answerId);
                            currentViewModelItem.correct = currentViewModelItem.correct.filter(m => m !== answerId);
                            currentViewModelItem.incorrect.push(answerId);
                        }


                        if (currentViewModelItem.all.length === 0 && model.questions.length !== 0) {
                            $(""#nextQuestionBtn"").attr(""disabled"", false);
                        } else {
                            $(""#nextQuestionBtn"").attr(""disabled"", true);
                        }
                    });
            });
        }
    }

    function finishTask() {
        viewModel.push(currentViewModelItem);
        currentViewModelItem = null;

        viewModel.forEach(function(model) {
            delete model.all;
        });

        var data = {};
        data[""Answers""] = viewModel;
    ");
            WriteLiteral(@"    data[""ExerciseId""] = model.id;
        $.ajax({
            url: ""/Task/SaveExecution"",
            dataType: 'text',
            cache: false,
            method: ""POST"",
            data: data,
            success: function (grade) {
                swal({
                    title: ""Execution result"",
                    text: ""Your result is "" + JSON.parse(grade).result + "" %"",
                    confirmButtonColor: ""#0C8524"",
                    confirmButtonText: ""OK"",
                    closeOnConfirm: true,
                }, function () {
                    var url = '");
#nullable restore
#line 295 "C:\Users\User\Desktop\Арх\VietualSELaboratory\VietualSELaboratory\Views\Task\Execute.cshtml"
                          Write(Url.Action("Index", "Task"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
                    window.location.href = url;
                });

            }
        });
    }


    function clearCells() {
        $(""#all_answers"").empty();
        $(""#correct_answers"").empty();
        $(""#incorrect_answers"").empty();
    }
</script>

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Domain.RDBMS.Entities.Exercise> Html { get; private set; }
    }
}
#pragma warning restore 1591
